/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

const Camera = (props) => {
    const ref = useRef()
    const initialPosition = useRef({ x: 0 }) // Store the initial position

    useEffect(() => {
        // Capture the initial position once the ref is available
        if (ref.current) {
            initialPosition.current.x = ref.current.position.x
        }
    }, [])

    // Track elapsed time
    let elapsedTime = 0

    useFrame((state, delta) => {
        if (ref.current) {
            elapsedTime += delta

            // Oscillate around the captured initial position
            const amplitude = 0.1 // Range of movement
            const frequency = 0.5 // Speed of oscillation (Hz)

            ref.current.position.x =
                initialPosition.current.x +
                Math.sin(elapsedTime * frequency * Math.PI * 2) * amplitude
        }
    })

    const { nodes, materials } = useGLTF('/models/level-react-draco.glb')

    return (
        <mesh
            ref={ref}
            {...props}
            castShadow
            receiveShadow
            geometry={nodes.Camera.geometry}
            material={materials.Level}
        />
    )
}

useGLTF.preload('models/level-react-draco.glb')

export default Camera
